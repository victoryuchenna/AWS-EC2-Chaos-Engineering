AWSTemplateFormatVersion: 2010-09-09

Description: >-
  AWS CloudFormation Template WAMP_Multi_AZ: Create a highly available,
  scalable WAMP stack with an Amazon RDS database instance for the backend data
  store. This template demonstrates using the AWS CloudFormation bootstrap
  scripts to install the packages and files necessary to deploy the Apache web
  server and PHP at instance launch time. **WARNING** This template creates one
  or more Amazon EC2 instances, an Application Load Balancer and an Amazon RDS
  DB instance. You will be billed for the AWS resources used if you create a
  stack from this template.

Parameters:
  VPCCidrBlock:
    Description: VPC CidrIp
    Type: String
    Default: 10.0.0.0/16

  PublicCidrBlock1:
    Description: 'IGW Routed Subnet CIDR for AZ 1, default Range 10.0.0.1 - 10.0.15.254'
    Type: String
    Default: 10.0.0.0/20

  PublicCidrBlock2:
    Description: 'IGW Routed Subnet CIDR for AZ 2, default Range 10.0.16.1 - 10.0.31.254'
    Type: String
    Default: 10.0.16.0/20

  PublicCidrBlock3:
    Description: 'IGW Routed Subnet CIDR for AZ 3, default Range 10.0.32.1 - 10.0.47.254'
    Type: String
    Default: 10.0.32.0/20

  PrivateCidrBlock1:
    Description: 'Private Subnet CIDR for AZ 1, default Range 10.0.48.1 - 10.0.63.254'
    Type: String
    Default: 10.0.48.0/20

  PrivateCidrBlock2:
    Description: 'Private Subnet CIDR for AZ 2, default Range 10.0.64.1 - 10.0.79.254'
    Type: String
    Default: 10.0.64.0/20

  PrivateCidrBlock3:
    Description: 'Private Subnet CIDR for AZ 3, default Range 10.0.80.1 - 10.0.95.254'
    Type: String
    Default: 10.0.80.0/20

  DBName:
    Default: iptracker
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBUser:
    Default: admin
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    Default: DbPassword
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.m4.large
      - db.r3.large
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
      - db.t3.small
    ConstraintDescription: must select a valid database instance type.

  MultiAZDatabase:
    Default: 'true'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.

  WebServerCapacity:
    Default: '3'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - m4.large
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  S3PutLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource: !Sub '${S3Bucket.Arn}*'

  S3PutLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt S3PutLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import base64

          def handler(event, context):
            try:
              print(json.dumps(event))
              client = boto3.client('s3')
              content = ''
              if 'Content' in event['ResourceProperties']:
                content = event['ResourceProperties']['Content']
              if 'Base64Body' in event['ResourceProperties']:
                content = base64.b64decode(event['ResourceProperties']['Base64Body']).decode()
              bucket = event['ResourceProperties']['Bucket']
              key = event['ResourceProperties']['Key']
              physicalid = 's3://%s/%s' % (bucket, key)
              if event['RequestType'] == 'Delete':
                client.delete_object(Bucket=bucket, Key=key)
              else:
                client.put_object(Bucket=bucket, Key=key, Body=content.encode())
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalid)

            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              raise(e)
  #####
  # THE NETWORK
  #####
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: ApplicationVPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: ApplicationIGW

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Ref PublicCidrBlock1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ApplicationVPC-PublicSubnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Ref PublicCidrBlock2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ApplicationVPC-PublicSubnet2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: !Ref PublicCidrBlock3
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ApplicationVPC-PublicSubnet3

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ApplicationVPC-IGWRoute

  IGWRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Ref PrivateCidrBlock1
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnet1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: !Ref PrivateCidrBlock2
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnet2

  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: !Ref PrivateCidrBlock3
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnet3

  NAT1EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NAT2EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NAT3EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NATGW1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NAT1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetNAT1

  NATGW2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NAT2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetNAT2

  NATGW3:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NAT3EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetNAT3

  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetRoute1

  NAT1Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW1

  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetRoute2

  NAT2Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW2

  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ApplicationVPC-PrivateSubnetRoute3

  NAT3Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW3

  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  #####
  # THE APPLICATION
  #####
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMIAMRole

  AppServerScript:
    Type: Custom::S3Object
    Properties:
      ServiceToken: !GetAtt S3PutLambdaFunction.Arn
      Bucket: !Ref S3Bucket
      Key: app-server.js
      Base64Body: dmFyIGh0dHAgPSByZXF1aXJlKCJodHRwIik7CnZhciBteXNxbCA9IHJlcXVpcmUoJ215c3FsJyk7CnZhciBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7CmNvbnN0IHsgdjQ6IHV1aWR2NCB9ID0gcmVxdWlyZSgndXVpZCcpOwpjb25zdCBjb21tYW5kTGluZUFyZ3MgPSByZXF1aXJlKCdjb21tYW5kLWxpbmUtYXJncycpOwoKY29uc3Qgb3B0aW9uRGVmaW5pdGlvbnMgPSBbCiAgeyBuYW1lOiAncG9ydCcsIGFsaWFzOiAncCcsIHR5cGU6IE51bWJlciwgZGVmYXVsdE9wdGlvbjogODB9LAogIHsgbmFtZTogJ2RiaG9zdCcsIGFsaWFzOiAnaCcsIHR5cGU6IFN0cmluZ30sCiAgeyBuYW1lOiAnZGJ1c2VyJywgYWxpYXM6ICd1JywgdHlwZTogU3RyaW5nfSwKICB7IG5hbWU6ICdkYnBhc3MnLCBhbGlhczogJ3MnLCB0eXBlOiBTdHJpbmd9LAogIHsgbmFtZTogJ2RibmFtZScsIGFsaWFzOiAnZCcsIHR5cGU6IFN0cmluZ30KXQpjb25zdCBvcHRpb25zID0gY29tbWFuZExpbmVBcmdzKG9wdGlvbkRlZmluaXRpb25zKTsKY29uc29sZS5sb2cob3B0aW9ucyk7Cgp2YXIgZGIgPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHsKICBob3N0OiBvcHRpb25zLmRiaG9zdCwKICB1c2VyOiBvcHRpb25zLmRidXNlciwKICBwYXNzd29yZDogb3B0aW9ucy5kYnBhc3MsCiAgZGF0YWJhc2U6IG9wdGlvbnMuZGJuYW1lCn0pOwoKZGIuY29ubmVjdCgpOwoKdmFyIFNFUlZFUl9QT1JUID0gb3B0aW9ucy5wb3J0OwoKdmFyIG1ldGFkYXRhID0ge307CnZhciBNRVRBID0gbmV3IEFXUy5NZXRhZGF0YVNlcnZpY2UoKTsKTUVUQS5yZXF1ZXN0KCcvbGF0ZXN0L2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQnLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgbWV0YWRhdGEgPSBKU09OLnBhcnNlKGRhdGEpOwogIE1FVEEucmVxdWVzdCgnL2xhdGVzdC9tZXRhLWRhdGEvbG9jYWwtaG9zdG5hbWUnLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICBtZXRhZGF0YVsncHJpdmF0ZUhvc3RuYW1lJ10gPSBkYXRhOwogIH0pOwp9KTsKCmZ1bmN0aW9uIHdyaXRlUmVzcG9uc2UobWVzc2FnZSwgY29udGVudCwgbGluaywgaW1hZ2VVcmwsIHJlcykgewogIC8vIHNldCByZXNwb25zZSBjb250ZW50CiAgcmVzLndyaXRlKGAKICAgICAgICAgICAgPCFET0NUWVBFIGh0bWw+CiAgICAgICAgICAgIDxodG1sPgogICAgICAgICAgICAgICAgPGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZT5SZXNpbGllbmN5IFdvcmtzaG9wITwvdGl0bGU+CiAgICAgICAgICAgICAgICA8L2hlYWQ+CiAgICAgICAgICAgICAgICA8Ym9keT4KICAgICAgICAgICAgICAgICAgICA8aDE+V2VsY29tZSB0byB0aGUgUmVzaWxpZW5jeSBXb3Jrc2hvcCE8L2gxPgogICAgICAgICAgICAgICAgICAgIDxwPiR7bWVzc2FnZX08L3A+CiAgICAgICAgICAgICAgICAgICAgPHA+JHtjb250ZW50fTwvcD4KICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIke2xpbmt9Ij5jbGljayBoZXJlIHRvIGdvIHRvIG90aGVyIHBhZ2U8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIke2ltYWdlVXJsfSIgYWx0PSIiIHdpZHRoPSI3MDAiPgogICAgICAgICAgICAgICAgPC9ib2R5PgogICAgICAgICAgICA8L2h0bWw+YCk7Cn0KCnZhciBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihmdW5jdGlvbiAocmVxLCByZXMpIHsKICB2YXIgcnFzdElkID0gdXVpZHY0KCk7CiAgY29uc29sZS5sb2cobmV3IERhdGUoKSwgYGhhbmRsaW5nIHJlcXVlc3QgJHtycXN0SWR9IGZyb20gJHtyZXEuc29ja2V0LnJlbW90ZUFkZHJlc3N9IGZvciAke3JlcS51cmx9YCk7CgogIGlmIChyZXEudXJsID09ICIvIikgewogICAgdmFyIHdlYlNpdGVJbWFnZVVybCA9ICJodHRwczovL2F3cy13ZWxsLWFyY2hpdGVjdGVkLWxhYnMtb2hpby5zMy51cy1lYXN0LTIuYW1hem9uYXdzLmNvbS9pbWFnZXMvQ2lycXVlX29mX3RoZV9Ub3dlcnMuanBnIjsKICAgIG1lc3NhZ2UgPSBgRGF0YSBmcm9tIHRoZSBtZXRhZGF0YSBBUElgOwogICAgY29udGVudCA9IGAKICAgICAgYWNjb3VudElkOiAke21ldGFkYXRhLmFjY291bnRJZH08YnIvPgogICAgICBhbWlJZDogJHttZXRhZGF0YS5pbWFnZUlkfTxici8+CiAgICAgIGF2YWlsYWJpbGl0eVpvbmU6ICR7bWV0YWRhdGEuYXZhaWxhYmlsaXR5Wm9uZX08YnIvPgogICAgICBpbnN0YW5jZUlkOiAke21ldGFkYXRhLmluc3RhbmNlSWR9PGJyLz4KICAgICAgaW5zdGFuY2VUeXBlOiAke21ldGFkYXRhLmluc3RhbmNlVHlwZX08YnIvPgogICAgICBwcml2YXRlSG9zdG5hbWU6ICR7bWV0YWRhdGEucHJpdmF0ZUhvc3RuYW1lfTxici8+CiAgICAgIHByaXZhdGVJcDogJHttZXRhZGF0YS5wcml2YXRlSXB9PGJyLz4KICAgIGA7CgogICAgZGIucXVlcnkoIklOU0VSVCBJTlRPIGhpdHMoaXApIHZhbHVlcyAoPykiLCBbcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzXSwgZnVuY3Rpb24gKGVycm9yLCByZXN1bHRzLCBmaWVsZHMpIHsKICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjsKICAgIH0pOwoKICAgIC8vIHNldCByZXNwb25zZSBoZWFkZXIKICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7ICJDb250ZW50LVR5cGUiOiAidGV4dC9odG1sIiB9KTsKCiAgICB3cml0ZVJlc3BvbnNlKG1lc3NhZ2UsIGNvbnRlbnQsICIvZGF0YSIsIHdlYlNpdGVJbWFnZVVybCwgcmVzKTsKCiAgICByZXMuZW5kKCk7CiAgfSBlbHNlCiAgICBpZiAocmVxLnVybCA9PSAiL2RhdGEiKSB7CiAgICAgIGNvbnNvbGUubG9nKG5ldyBEYXRlKCksIGByZXF1ZXN0ICR7cnFzdElkfSwgUHJvdmlkaW5nIGRldGFpbGVkIHJlc3BvbnNlYCk7CgogICAgICAvLyBzZXQgcmVzcG9uc2UgaGVhZGVyCiAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7ICJDb250ZW50LVR5cGUiOiAidGV4dC9odG1sIiB9KTsKCiAgICAgIG1lc3NhZ2UgPSBgRGF0YSBmcm9tIHRoZSBkYXRhYmFzZWA7CgogICAgICBkYi5xdWVyeSgnU0VMRUNUICogRlJPTSBoaXRzIE9SREVSIEJZIHRpbWUgREVTQyBMSU1JVCAxMCcsIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0cywgZmllbGRzKSB7CiAgICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjsKICAgICAgICAvLyBjb25zb2xlLmxvZyAocmVzdWx0cyk7CiAgICAgICAgY29udGVudCA9ICcnOwogICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgdmFyIHJvdyA9IHJlc3VsdHNba2V5XTsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nIChyb3cpOwogICAgICAgICAgY29udGVudCArPSAnaXAgPSAnICsgcm93LmlwICsgJyBcdCB0aW1lID0gJyArIHJvdy50aW1lICsgJzxici8+JzsKICAgICAgICB9KTsKCiAgICAgICAgd3JpdGVSZXNwb25zZShtZXNzYWdlLCBjb250ZW50LCAiLyIsICIiLCByZXMpOwogICAgICAgIHJlcy5lbmQoKTsKICAgICAgfSk7CgogICAgfSBlbHNlIHsKICAgICAgcmVzLmVuZCgiSW52YWxpZCBSZXF1ZXN0ISIpOwogICAgfQp9KTsKCnNlcnZlci5saXN0ZW4oU0VSVkVSX1BPUlQpOwoKY29uc29sZS5sb2cobmV3IERhdGUoKSwgYE5vZGUuanMgd2ViIHNlcnZlciBhdCBwb3J0ICR7U0VSVkVSX1BPUlR9IGlzIHJ1bm5pbmcuLmApOw==

  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref WebServerCapacity
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: ha-windows-app-server
          PropagateAtLaunch: true

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base}}'
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData:
        Fn::Base64: 
          !Sub |
            <powershell>
            Start-Transcript -Path "C:\UserData.log" -Append
            # $ErrorActionPreference = "Stop" 
            # $LASTEXITCODE=0
            # cfn-init.exe -s ${AWS::StackId} -r WebServerGroup --region ${AWS::Region}
            iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
            choco install mysql-cli -y
            choco install python -y
            py -m pip install ec2_metadata pymysql
            (new-object net.webclient).DownloadFile('https://s3.amazonaws.com/aws-cli/AWSCLI64.msi','c:\AWSCLI64.msi')
            msiexec.exe /i 'C:\AWSCLI64.msi' /qn
            Invoke-WebRequest -Uri https://nodejs.org/dist/v16.13.1/node-v16.13.1-win-x64.zip -UseBasicParsing -OutFile c:\users\administrator\nodejs.zip
            Expand-Archive -LiteralPath c:\users\administrator\nodejs.zip -DestinationPath c:\users\administrator
            c:\users\administrator\node-v16.13.1-win-x64\npm install --prefix c:\users\administrator mysql aws-sdk uuid command-line-args
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
            @"
            CREATE DATABASE IF NOT EXISTS iptracker;
            USE iptracker;
            CREATE TABLE IF NOT EXISTS hits(ip varchar(20),
                              time DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            call mysql.rds_set_configuration('binlog retention hours', 24);
            GRANT ALTER, CREATE, DROP, INDEX, INSERT, UPDATE, DELETE, SELECT ON myschema.* TO 'admin'@'%';
            GRANT ALL PRIVILEGES ON awsdms_control.* TO 'admin'@'%';
            "@ | out-file -encoding ASCII c:\createIPTable.sql
            cat c:\createIPTable.sql | mysql -h ${MySQLDatabase.Endpoint.Address} -u ${DBUser} --password=${DBPassword} --silent --force -b >mysql-stderr.txt
            & 'C:\Program Files\Amazon\AWSCLI\bin\aws' s3 cp s3://${S3Bucket}/app-server.js c:\users\administrator\server.js
            Start-Process -WorkingDirectory c:\users\administrator -RedirectStandardOutput c:\users\administrator\server-output.log -RedirectStandardError c:\users\administrator\server-error.log c:\users\administrator\node-v16.13.1-win-x64\node { c:\users\administrator\server.js -p 80 -u ${DBUser} -s ${DBPassword} -d iptracker -h ${MySQLDatabase.Endpoint.Address}}
            # cfn-signal.exe -e $LASTEXITCODE --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}
            </powershell>
            <persist>false</persist>

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      VpcId: !Ref VPC

  LoadGenSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  LoadGenInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m5a.large
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !GetAtt LoadGenSecurityGroup.GroupId
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          mkdir -p /root/locust
          cat >/root/locust/locustfile.py <<EOF
          from locust import HttpUser, constant_pacing, task

          class WebsiteUser(HttpUser):
              # execute a GET request every 1 second
              wait_time = constant_pacing(1)

              def on_start(self):
                  print ("Worker thread starting up...")

              @task
              def index(self):
                  # request the index and allow a 2 sec timeout for connect or response
                  self.client.get("/", timeout=(60,60))
          EOF
          amazon-linux-extras install -y docker
          service docker start
          docker pull locustio/locust
          docker run --rm -d -p 80:8089 -v /root/locust:/tmp/locust locustio/locust -f /tmp/locust/locustfile.py

  #####
  ## THE DATABASE
  #####
  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  MySQLDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnets for application DB
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  MySQLDatabase:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabase
      DBSubnetGroupName: !Ref MySQLDBSubnetGroup
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 100
      VPCSecurityGroups:
        - !GetAtt 
          - DBEC2SecurityGroup
          - GroupId

Outputs:
  LoadGenURL:
    Description: URL for Locust.io load generator
    Value: !Sub "http://${LoadGenInstance.PublicIp}"

  ApplicationURL:
    Description: URL for newly created application server
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName

  AutoscalingGroupName:
    Description: The name of the Autoscaling Group
    Value: !Ref WebServerGroup

  DBInstanceName:
    Description: The name of the MySQL Database Instance
    Value: !Ref MySQLDatabase